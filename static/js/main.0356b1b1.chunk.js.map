{"version":3,"sources":["utils/constants.js","components/TerminalBody/TerminalBody.js","utils/dragEnabler.js","components/TerminalTitle/TerminalTitle.js","components/Terminal.js","App.js","reportWebVitals.js","index.js"],"names":["KEY_CODES","COMMANDS","TerminalBody","useState","fullCommand","setFullCommand","currentPath","history","setHistory","useEffect","focusInput","inputRef","React","useRef","current","focus","renderHistory","map","item","path","command","className","onClick","id","value","type","e","target","keyCode","preventDefault","currentDetails","recordHistory","split","argument","options","console","log","executeCommand","element","terminalBody","document","getElementById","scrollTo","top","scrollHeight","left","behavior","dragElement","elm","elmContainer","pos1","pos2","pos3","pos4","dragMouseMove","window","event","clientX","clientY","style","offsetTop","offsetLeft","dragMouseUp","onmouseup","onmousemove","onmousedown","TerminalTitle","header","terminal","Terminal","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0356b1b1.chunk.js","sourcesContent":["const KEY_CODES = {\n    TAB: 9,\n    ENTER: 13,\n}\n\nconst COMMANDS = {\n    CLEAR: \"clear\",\n    CD: \"cd\",\n}\n\nexport {\n    KEY_CODES,\n    COMMANDS\n}","import React, { useEffect, useState } from \"react\";\nimport { COMMANDS, KEY_CODES } from \"../../utils/constants\";\nimport \"./TerminalBody.css\"\nconst TerminalBody = () => {\n\n    const [fullCommand, setFullCommand] = useState(\"\")\n    const [currentPath, setCurrentPath] = useState(\"/\")\n    const [history, setHistory] = useState([])\n    useEffect(() => {\n        focusInput();\n    }, [])\n\n    const inputRef = React.useRef();\n\n    const scrollToBottom = (element) => {\n\n        element.scrollTo({\n            top: element.scrollHeight,\n            left: 0,\n            behavior: 'smooth'\n        });\n    }\n\n    const onClickBody = () => {\n        focusInput();\n    }\n\n    const focusInput = () => {\n        inputRef.current.focus()\n    }\n\n    const executeCommand = () => {\n        const [command, argument, options] = fullCommand.split(\" \")\n        console.log(command, argument, options)\n        switch (command) {\n            case COMMANDS.CLEAR:\n                setHistory([]);\n                break;\n        \n            default:\n                break;\n        }\n    }\n\n    const recordHistory = () => {\n        const currentDetails = {\n            path: currentPath,\n            command: fullCommand,\n        }\n        setHistory([...history, currentDetails])\n        setFullCommand(\"\")\n    }\n\n    const onChangeText = (e) => {\n\n        const keyCode = e.keyCode\n        switch (keyCode) {\n            case KEY_CODES.TAB:\n                e.preventDefault();\n                break;\n\n            case KEY_CODES.ENTER:\n                e.preventDefault();\n                recordHistory(currentPath, fullCommand)\n                executeCommand();\n                break;\n\n            default:\n                break;\n        }\n        const terminalBody = document.getElementById(\"terminalBody\")\n        scrollToBottom(terminalBody)\n    }\n\n    const renderHistory = history.map((item) => <>{`${item.path}$ ${item.command}`}<br /></>)\n\n    return (\n        <div className=\"terminalBody\" onClick={onClickBody} id=\"terminalBody\">\n            <div className=\"textContainer\">\n                {renderHistory}\n                {currentPath}$&nbsp;{fullCommand}\n                <input className=\"commandInput\"\n                    value={fullCommand}\n                    type=\"hidden\"\n                    type=\"text\"\n                    onChange={(e) => setFullCommand(e.target.value)}\n                    ref={inputRef} onKeyDown={onChangeText}\n                />\n            </div>\n        </div>\n    )\n}\nexport default TerminalBody;","\nconst dragElement = (elm, elmContainer) => {\n    var pos1, pos2, pos3, pos4;\n    elm.onmousedown = dragMouseDown;\n  \n    function dragMouseDown(e) {\n      e = e || window.event;\n      e.preventDefault();\n      //get x , y when i click the mouse\n      pos3 = e.clientX;\n      pos4 = e.clientY;\n      document.onmousemove = dragMouseMove;\n      document.onmouseup = dragMouseUp;\n    }\n  \n    function dragMouseMove(e) {\n      e = e || window.event;\n      e.preventDefault();\n      //get x , y when i move the mouse\n      pos1 = pos3 - e.clientX;\n      pos2 = pos4 - e.clientY;\n      //update\n      pos3 = e.clientX;\n      pos4 = e.clientY;\n      elmContainer.style.top = elmContainer.offsetTop - pos2 + \"px\";\n      elmContainer.style.left = elmContainer.offsetLeft - pos1 + \"px\";\n    }\n  \n    function dragMouseUp() {\n      document.onmouseup = null;\n      document.onmousemove = null;\n    }\n  }\n  \n  export default dragElement;\n","import { useEffect } from 'react';\nimport dragElement from '../../utils/dragEnabler';\nimport './TerminalTitle.css';\n\nconst TerminalTitle = () => {\n    useEffect(() => {\n        const header = document.getElementById('dragTerminalTitle')\n        const terminal = document.getElementById('dragTerminal')\n        dragElement(header, terminal)\n    })\n    return (\n        <div className=\"header\" id=\"dragTerminalTitle\">\n            <div className=\"actionButtons\">\n                <span className=\"actionButton\">x</span>\n                <span className=\"actionButton\">i</span>\n                <span className=\"actionButton\">o</span>\n            </div>\n            <div className=\"titleContainer\">\n                Terminal\n            </div>\n\n        </div>\n    )\n}\n\nexport default TerminalTitle;                                                              ","\nimport './Terminal.css'\nimport TerminalBody from \"./TerminalBody/TerminalBody\";\nimport TerminalTitle from \"./TerminalTitle/TerminalTitle\";\n\nconst Terminal = () => {\n\n    return (\n        <div className=\"terminal\" id=\"dragTerminal\">\n            <TerminalTitle />\n            <TerminalBody />\n        </div>\n    )\n}\nexport default Terminal;","import './App.css';\nimport Terminal from './components/Terminal';\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <Terminal />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}